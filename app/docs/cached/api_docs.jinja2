{%extends "docs.jinja2" %}
{% block docs %}
<div class="container">
<h1>UsersResource</h1>
<p>Ресурс для работы с пользователями.</p>
<p>Реализует GET, PUT, POST запросы.</p>
<p>Точки входа:</p>
<p>'/api/v1/users', '/api/users/<int:user_id>'</p>
<h3>GET</h3>
<p>Если запрашивается инфомрация о текущем пользователе или user_id не передан, то</p>
<p>результатом запроса будет полная информация о текущем пользователе в формате</p>
<p>json.</p>
<h3>PUT</h3>
<p>Данный запрос позволяет редактирвоать информацию пользователя по user_id</p>
<p>Данные должны передавать в теле соответствующего PUT-запроса.</p>
<h3>POST</h3>
<p>Запрос отвечающий за добавление нового пользователя. Обязательные данные для</p>
<p>создания нового пользваотеля: first_name, second_name, password,</p>
<p>password_again, email. Все они также должны передаваться в теле</p>
<p>POST-запроса</p>
<h1>MessagesResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.</p>
<p>Ресурс для работы с сообщенями.</p>
<p>Реализует POST-запрос.</p>
<p>Точка входа:</p>
<p>'/api/v1/messages'</p>
<h3>POST</h3>
<p>Передаются все данные, необходимые для создания сообщения: sender_id,</p>
<p>chat_id, text. В случае успешного создания возвращается json типа:</p>
<p>{'success': 'OK'}</p>
<h1>MessagesResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.</p>
<p>Ресурс для работы с сообщенями.</p>
<p>Реализует GET-запрос.</p>
<p>Точка входа:</p>
<p>'/api/v1/messages/<int:alt_id>/<date>'</p>
<h3>GET</h3>
<p>При данном запросе либо не передается ничего, тогда результатом будет список</p>
<p>последних сообщений по 1 от каждого друга текущего пользователя. Если</p>
<p>передается alt_id, то результатом будет список сообщений от пользователя</p>
<p>с переданным alt_id к текущему пользователю. Если передается и alt_id,</p>
<p>и date, то результатом будет список сообщений от пользователя</p>
<p>с переданным alt_id к текущему пользователю, которые были созданы после</p>
<p>переданной даты date</p>
<h1>UsersFriendsResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.</p>
<p>Ресурс для работы с друзьями пользователей.</p>
<p>Реализует GET, POST, DELETE запросы.</p>
<p>Точка входа:</p>
<p>'/api/v1/users_friends'</p>
<h3>GET</h3>
<p>Если ничего не переадется, то результатом будет список друзей текущего</p>
<p>залогиненного пользователя. Если передается аргумент is_accepted,</p>
<p>то возвращаются все друзья, колонка is_accepted которых равна переданному</p>
<p>параметру.</p>
<h3>POST</h3>
<p>При данном запросе переадется обязательный аргумент alternative_id</p>
<p>пользователя, который будет добавлен в друзья к текущему.</p>
<h3>DELETE</h3>
<p>Этот запрос принимает обязательный аргумент alternative_id. Пользователь</p>
<p>с этим alternative_id будет удален</p>
<h1>ChatsResource</h1>
<p>К этому API могут обращаться только авторизированные пользователи.</p>
<p>Русурс для работы с чатами.</p>
<p>Реализует GET, POST, DELETE запросы.</p>
<p>Точка входа:</p>
<p>/api/v1/chats'</p>
<h3>GET</h3>
<p>Возвращает список чатов текущего пользователя</p>
<h3>POST</h3>
<p>При данном запросе создается чат по переданным аргументам</p>
<p>(first_author_id, second_author_id - обязательные, title - необязательный)</p>
<h3>DELETE</h3>
<p>При данном запросе переадется id чата либо alternative_id пользователя,</p>
<p>с которым ведётся чат. Этот чат и все сообщения из него будут удалены.</p>
</div>
{% endblock %}